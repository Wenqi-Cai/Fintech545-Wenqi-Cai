# -*- coding: utf-8 -*-
"""returns.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WjHMqi6vypN_Rp5x1t-2f7gArm_fP2gf
"""

import pandas as pd
import numpy as np

def return_calculate(prices, method="DISCRETE", date_column="date"):
    """
    """
    # 检查日期列是否存在
    if date_column not in prices.columns:
        raise ValueError(f"date_column: {date_column} not in DataFrame: {list(prices.columns)}")

    # 提取资产列
    asset_columns = [col for col in prices.columns if col != date_column]
    if len(asset_columns) == 0:
        raise ValueError("No asset columns found in DataFrame.")

    # 转换为 NumPy 数组
    price_matrix = prices[asset_columns].values
    n, m = price_matrix.shape  # 行数（时间点数）和列数（资产数量）

    # 初始化收益率矩阵
    return_matrix = np.empty((n - 1, m), dtype=np.float64)

    # 计算价格比值
    return_matrix = price_matrix[1:] / price_matrix[:-1]

    # 根据方法计算收益率
    if method.upper() == "DISCRETE":
        return_matrix = return_matrix - 1.0
    elif method.upper() == "LOG":
        return_matrix = np.log(return_matrix)
    else:
        raise ValueError(f"method: {method} must be 'LOG' or 'DISCRETE'")

    # 构造输出 DataFrame
    return_dates = prices[date_column].iloc[1:].reset_index(drop=True)
    return_df = pd.DataFrame(return_matrix, columns=[f"{col}_Return" for col in asset_columns])
    return_df.insert(0, date_column, return_dates)

    return return_df

# 将价格数据转换为收益率
def calculate_returs(prices, date_column):
    prices = prices.copy()
    prices.iloc[:, 1:] = prices.iloc[:, 1:].pct_change()
    return prices

def calculate_log_returns(prices, column_name):
    """
    计算对数收益率
    """
    returns = np.log(prices[column_name] / prices[column_name].shift(1)).dropna()
    return returns